in man pages use / to look for keywords and n to go down the hits and shift+n to go up

in man pages g goes to the top and G goes to the bottom, use q to quit
use curl cheat.sh/<command to search for> for indepth explanations of commands via command line

p for uP n for dowN using shift as opposed to up and down arrow keys

can use Ctrl+u to delete everything to the left of your cursor

can use ! to run history command and !! to run the last done command

touch is used for creation of files

ls is used to view files

use mkdir to make directories

remove files with rm or directories with rmdir, can use rm -rf to remove directories with files in them

use cd to change directories

~ represents current user's home directory 

use .. to go back a directory, or ./path/path to signify current directory

whoami = current user

hostname = name of current device

can use touch to modify time and date of files to current time, can use -t option to set a specific time which uses YYYYMMDDhhmm as a format

use ls -lisa to see hidden files designated with a dot

variables represent other commands and can be found in the users bashrc file

cp copies a file while moving it somewhere

mv moves files ex. move <file> ./BASH which can also be used to rename said file

use Ctrl+l to clear screen

can use spaces to use a command on multiple values ex. touch a1 a2 a3

* is a wildcard which means literally everything like touch * for all files 

use ln -s <file> <name of link> which creates a symbolic link to the first mentioned file which can for example be cat'd to get the same data (map to get there)
just using ln <file> <name of link> creates a hardlink which actually stores the contents of the specified file which means you can delete the original file and still have the data (actual destination)

locate searches database for anything already installed
whereis shows where a tool is found
find is used for finding files which can use the -name option to search for a file by name along with -iname which is case insensitive, find can also be given a file path like find </filepath> -name juice.jpg
find also has a -type option to find directories, links, files, etc, find -mtime <number> finds files modified within the <number> amount of days, -empty just finds empty files
find can also use -executable to you guessed it, find executables. -maxdepth <number> defines the max amount of subdirectories the find command will look in

use mkfifo to create a named pipe which doesnt store anything but instead passes it through memory

can use pipes | to pass the result of commands to send it to another command

ex. of full command find /<filepath> -name "<filename>" -type <filetype> -print(automatically adds newline character after each entry)
alternatively use -printf to reference more information of files to reference ex. -printf "%i" but does not autom atically newline every entry

BRACE EXPANSION

code example find ./ -type d -exec ls -l {} \;

touch ./find/{1..10}.txt the .. denotes first number to last number ex. 1..10 == 1 to 10

find ./find/ !(what you dont want) -name *.txt == find everything that is not a .txt

can stack multiple -name's in finds to get more searches ex. find ./ -name *.txt -name *.sh with each new 


grep -i == case insensitive 
grep -e or egrep == extended output
grep -o == only shows what you searched for

cat /etc/passwd | egrep ":[0-9]{5}:" anytime the numbers 0-9 appear 5 times next to eachother you get a match
egrep -n prints line numbers for the results
egrep -v /bin/bash shows everything except given values

egrep /<path> -C<number> prints <number> of lines above and below with -A being just above and -B being just below

cut isolates information from outputs by default without affecting the actual information ex. cut -d: -f1- -s cuts based off of : gets evry field after the first one while -s doesnt print anything not containing the delimiter

& runs processes in the background while && is a logical and
; is used to chain commands together signifying the beginning of a new command
can use \ to continue the current command on a new line
|| == logical or
! == logical not
() are used to group values and commands together (think PEMDAS)

REDIRECTORs

> take output from a command and send it somewhere which will be overwritten, default > is standard output

redirect for example all error messages to a new file with 2>(<filename>) which you would normally send to /dev/null which is essentially a black hole 0 = standard input 1 = standard output 2 = standard error
can have multiple redirectors in 1 command

awk searches through files to find specified data ex. awk '{print}' file.txt just prints the entire file, but awk '/<word to look for>/ {print}' <file> finds actual words in the file
awk '{print NR,$0}' <file> prints line numbers for the output with $0 being the start of the lines while NR makes the linenumbers appear, can use awk 'NR==3, NR==8 {print NR,$0}' <file> to print only specific lines of the file
awk -F: '{print $NF}' where -F specifies the delimiter and $NF is the last field of the delimited values, can also use {print $1,$3} to specify other fields
awk 'BEGIN {FS='#'}{print $1,#2} FS uses the delimiter to split the output into fields which will only print the specified fields where BEGIN just starts at the beginning of the line


sort sorts out numbers, letters, and then case sensitivity without changing the file, syntax is simply sort <file> for the basic sort
sort -o <file to send to DST> <file being sorted SRC>
sort -r sorts the list in reverse
sort -n sorts numerically sending numbers to the bottom and sorting by the actual ascii alphanumeric alphabet
sort -u sorts duplicates
sort -m sorts months
sort -k <number> <file> sorts by the specified column in number default delimited by space optionally using <number,number> to check multiple columns with the comma being a range of the first number to the second


sed makes direct changes to files that are permanent
sed 's/tea/coffee/' <file> the s specifies swapping/substitution the first value with the second value in every first instance of every line which can optionally be 's/tea/coffee/g' with the g meaning global which applies to every instance of tea
sed '5 s/tea/coffee/' <file> which specifies which line is changed which can also optionally have the g for global to change every instance
sed '$d' <file> deletes the last line of the file


uniq -c <file> specifies the number of times a line is repeated
uniq -d <file> shows only duplicate lines
*must sort before using uniq since it only checks the current line and the line below it for duplicates*
uniq -D <file> shows all the instances of the duplicate lines seperated into the groups as they appeared
uniq -i makes the checker case insensitive 


alias -p shows aliases
alias nano='vim' is how you make an alias
can use \<command> to use the normal version of a command to ignore an alias
unalias <alias name> to remove aliases


BASIC BASH SCRIPTING
if [[ -f /etc/passwd ]]; then
  echo "/etc/passwd exists"
elif [[ ! -f /etc/passwd ]]; then
  echo "das no good"
else
  <not used for example but still there ya know?>
fi

after creating script sudo chmod 755 it then bash <bash script> it to run it or do ./ to run the script
just use the student guide for the conditionals

if [[ 41 -eq 42]]; then
  echo "41 is 42"
else 
  echo "41 is not 42 you goofy goober";
fi

can use -eq or == for numbers in bash aswell as -ne or !=, greater and less than symbols only work with strings ex. < and > do not work while -gt and -lt work

variables are made by doing A = $(<data>) which is then referenced by $A

for f in /etc/*.conf do
  echo($f)

different quotes like " and ' or a lack thereof affects how the program runs, like how single quotes prints the literal of a variable while double quotes actually prints the value stored in the variable
you can also use quotes like 'runnin around "lookin"' to put quotes within quotes (usage pending)

reference variable substitution for how to add or take values from variables, use colons to add, subtract, or remove values for the one particular instance where the variable is referenced

surprise if then script!
  1 #!/bin/bash
  2 
  3 function test_shadow () {
  4     if [ -e /etc/shadow ] ;
  5     then
  6         echo 'shadow exists'
  7     else
  8         echo 'shadow isnt found'
  9 fi
 10 }
 11 test_shadow

use 'BEGIN {OFS='<special character>'}' to put the defined OFS inbetween each field given by awk 

command substitution negates newlines and prints out every value of a given command like md5sum $(find ,etc>) will print the md5sum for every file the find command gets

example of getting a user choice
  1 #!/bin/bash
  2 
  3 function getuserchoice () {
  4     echo "Make a choice[1,2,3]: "
  5     read userchoice
  6     case $userchoice in
  7         (1) echo one ;;
  8         (2) echo two ;;
  9         (3) echo three ;;
 10         (*) echo other ;;
 11     esac
 12 }
 13 getuserchoice

can use tar to zip files so they can be md5sum'd
cant use pipes to put data in files, have to use a redirector
can echo a directory/file/etc to create a string of the given item to then create a md5sum with a null value "-" at the end
can use a \ to make a file with a space in the middle

basic for of each loop
  1 #!/bin/bash
  2 
  3 while [ what test ] 
  4 do  
  5     commands
  6 done
  7 
  8 ####################
  9 
 10 for <var> in <list>
 11 do  
 12     commands
 13 done
 14 
 15 ####################
 16 
 17 until <tests>
 18 do  
 19     commands
 20 done
can still use break and continue

While loop example
  1 #!/bin/bash
  2 
  3 while true 
  4 do
  5     echo "pizza"
  6     sleep 1
  7 done
      
another while loop example
  1 #!/bin/bash
  2 
  3 counter=1
  4 while [[ $counter -le 10 ]] 
  5 do
  6     echo $counter
  7     ((counter++))
  8     # or use this to increment by 1
  9     # counter=`expr $counter + 1`
 10 done
 MUST USE GRAVE KEY TO DO THE expr COMMAND

until loop example
  1 #!/bin/bash
  2 
  3 a=0
  4 until [[ $a -gt 10 ]]
  5 do
  6     echo $a
  7     ((a++))
  8 done

for loop example
  1 #!/bin/bash
  2 
  3 names='Mike Lola Kim Sherry Vincent Deez'
  4 for names in $names
  5 do
  6     echo $names
  7 done
  8 echo is done

range example
  1 #!/bin/bash
  2 
  3 for value in {1..20..2}
  4 do
  5     echo $value
  6 done
range works the same way as it does in python with start stop step

pretest KNOWLEDGE
cut -d: -F
awk
sed
grep -v -i -o -r
find -type -exec -mtime 
sort -n -r -t
uniq -c
touch -t -d
tar -z -cvf -x
