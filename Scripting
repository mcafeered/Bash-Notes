make multiple directories at once
mkdir $HOME/{1123,1134,1145,1156}

make multiple directories with defferent ascending numbers
mkdir $HOME/1123
touch $HOME/1123/{1..5}.txt $HOME/1123/{6..9}~.txt

find all files that have the .txt extension
find $HOME/1123 -name *.txt

copy all empty files that end in .txt to another directory
find $HOME/1123 ! -name *~.txt -name *.txt -exec cp {} $HOME/CUT/ \;

find empty files and print their names and inode numbers
find /var -empty -printf "%i %f\n"

find any file with a specic inode number and print it
find /* -inum 4026532575 -printf "%f\n"

using cut to get files that contain an extension and redirect them to another file
ls $HOME/CUT/ | cut -d. -f1- -s > $HOME/CUT/names

OR with ls -l 
ls -l $HOME/CUT | cut -d. -f1- -s | cut -d: -f1- -s | cut -d' ' -f2 > $HOME/CUT/names

greps only ip address and sorts them with counts
egrep -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}" StoryHiddenIPs | sort -r | uniq -c | sort -r

script that extracts all names of users with a uid above 3 with /bin/bash as their shell
cat $HOME/passwd | grep '/bin/bash' | awk -F: '($3 > 4) {print $1}' > $HOME/SED/names.txt

OR

awk -F: '3 > 3 && $NF == "/bin/bash" {print $1}' $HOME/passwd > $HOME/SED/names.txt


finds specific errors in dmesg 
dmesg > dmesg.txt
grep 'CPU\|BIOS' dmesg.txt | grep -v 'usable\|reserved' | cut -d']' -f2-

generates an md5 hash password and replaces passwords in the shadow file
A=$(openssl passwd -1 -salt bad4u Password1234)
awk -F: -v "var=$A" 'BEGIN {OFS=":"} {$2=var} {print $0}' $HOME/PASS/shadow.txt

writing one file to another while ommiting some lines
sed '/\/bin\/false/d' $HOME/passwd | sed '/\/bin\/sh/d' > $HOME/PASS/passwd.txt
CAN USE -e between multiple patterns in sed 

can track and use argumens when making a script, reference special characters in Bash student guide for premade variables

example of basic script to use for reference:
  1 #!/bin/bash
  2 #this is a basic function
  3 
  4 function print_somefun {
  5     echo $*
  6 }
  7 
  8 somefun() {
  9     echo This is the first variable: $1
 10 }
 11 
 12 somefun Try this out $1 $2
 13 print_somefun $*

another one which returns the line count of a specified file
  1 #!/bin/bash
  2 
  3 lines_in_file() {
  4     cat $1 | wc -l
  5 }
  6 
  7 num_lines=$( lines_in_file $1)
  8 
  9 echo The file $1 has $num_lines lines in it
 10 echo Good Day Sir!

one more
  1 #!/bin/bash
  2 
  3 function f1 {
  4     echo 'Sup'
  5     echo 'nosup'
  6 }
  7 
  8 function f2 {
  9     echo 'sup 2'
 10     echo 'bye lol'
 11 }
 12 
 13 f3 () {
 14     echo 'stupid'
 15     echo 'gotem'
 16 }
 17 
 18 f4 () { echo 'im last'; echo 'or Am I'; }
 19 
 20 f1
 21 f2
 22 f3
 23 f4

finds .bin extensions and prints the absolute path excluding the filename then sorts and gets rid of duplicates
find $HOME -name '*.bin' -printf "%h\n" | sort -n | uniq

copies the last line of passwd ($1 in this scenario) and changes its values then appends it back into passwd
tail -1 $1 | awk -F: -v "name=$2" -v "uidgid=$3" 'BEGIN {OFS=":"} {$1=name} {$3=uidgid} {$4=uidgid} {$6="/home/"name} {$NF="/bin/bash"} {print $0}' >> $1

finds all executables in directories then gets the tenth value and gets its md5 hash
md5sum $(find /bin /sbin /usr/bin /usr/sbin -executable -type f | sort | head | tail -1) | cut -d' ' -f1

sorts by the GID field in /etc/passwd then gets the tenth value and prints the md5sum of its home directory
sort -n -t: +3 /etc/passwd | head | tail -1 | awk -F':' '{print $6}' | md5sum | cut -d' ' -f1

this behemoth gets the md5sums for loads of values in the given directories then organizes them into files successfully hashed and directories not hashed successfully
touch storage error direrror
md5sum $(find /bin /etc /var -maxdepth 3) > storage 2>error
grep 'directory' error > direrror
A=$(wc -l storage | cut -d' ' -f1)
B=$(wc -l direrror | cut -d' ' -f1)
echo "Successfully Hashed Files: $A" ; echo "Unsuccessfully Hashed Directories: $B"

Checks for the existence of a directory and cp files into it if it does
#!/bin/bash
mkdir $HOME/SSH

if [[ -e $HOME/.ssh ]]; then
    cp $HOME/.ssh/* $HOME/SSH
else 
    echo "Run ssh-keygen"
fi

this script finds the ip address and pings it then  prints whether it was successful or not
#!/bin/bash
A=$(ip route | grep 'default' | cut -d' ' -f3)
B=$(which ping)
C=" 0% packet loss"
D=$($B -c 6 $A | grep -Eo "$C")
if [[ $C == $D ]]; then
   echo "successful";
else
   echo "failure";
fi

This script creates files in a directory then zips them and then tars them to archive them
mkdir "$HOME/ZIP" 
touch $HOME/ZIP/file{1..3}
echo 12345 | md5sum | cut -d' ' -f1 > $HOME/ZIP/file1
echo 6789 | md5sum | cut -d' ' -f1 > $HOME/ZIP/file2
echo abcdef | md5sum | cut -d' ' -f1 > $HOME/ZIP/file3
cd $HOME/ZIP
$(zip -j file.zip file1 file2 file3)
tar -czvf 'file.tar.gz' 'file.zip'

This script takes the root passwd entry and replaces it with a whole nother person than appends said entry back into the passwd file
#!/bin/bash
HOME=$"$HOME"
echo "A:A:A:A:A:A:A" > idol
name="LARRY CURLY MOE"
mkdir "$HOME/LARRY" "$HOME/CURLY" "$HOME/MOE"
for names in $name
do
uid=$(cat $HOME/$names.txt)
cat idol | awk -F: -v "uid=$uid" -v "name=$names" -v "HOME=$HOME" 'BEGIN {OFS=":"} {$1=name} {$2="x"} {$3=uid} {$4=uid} {$5="root"} {$6="$HOME/"name} {$7="/bin/bash"} {print}' >> $HOME/passwd
done

This script finds a bunch of files then organizes and see how many of them have what octal permissions
find /etc -type f -exec stat -c '%a' {} \; > ./A 2>/dev/null
for x in $(cat ./A) ; do
    if [[ $x -le 640 ]]; then
        echo $x >> ./less3
    elif [[ $x -ge 642 ]] ; then
        echo $x >> ./more3
    fi
done
echo 'Files w/ OCTAL Perm Values 642+:'
cat ./more3 | sort | uniq -c | sort -nr
echo
echo 'Files w/ OCTAL Perm Values 0-640:'
cat ./less3 | sort | uniq -c | sort -nr

checks the passwd file for any entry where the last field == /bin/bash
cat passwd | awk -F: '$NF == "bin/bash" {print}' 

PRACTICE TEST ANSWERS
function q1()
{
  #Valid Variables are:
  infile=$1
  outfile=$2
  sed 's/cat/dog/' $1 | sed 's/Navy/Army/' >> $2
  
}
function q1()
{
  #Valid Variables are:
  #none
  cat /etc/passwd | awk -F: '{print $1}'
}
function q1()
{
  #Valid Variables are:
  filename=$1
  cat $1 | sort -t: -k3 -n |awk -F: '{print $1}'
}
function q1()
{
  #Valid Variables are:
  dirname=$1
  if [[ -d $1 ]] ; then
    ls $1 | wc -l
  else
    echo Invalid Directory;
  fi
}
function q1()
{
  #Valid Variables are:
  dirdel=$1
  rm -rf $1
}
function q1()
{
  #Valid Variables are:
  newfile=$1
  filedate=$2
  touch -t "$2"1730 $1
}
function q1()
{
  #Valid Variables are:
  src=$1
  dst=$2
  match=$3
  sed "/$3/d" $1 > $2
}
function q1()
{
  #Valid Variables are:
  procname=$1
  pkill $1
}
function q1()
{
  #Valid Variables are:
  dirpath=$1
  find $1 -type f -mtime -1 -printf "%p\n" | sort
}
function q1()
{
  #Valid Variables are:
   fname=$1
   digit=$(cat $fname)  
if [[ $digit -le 9 ]]; then
    echo "single digit"
  elif [[ $digit -gt 9 && $digit -lt 100 ]]; then
    echo "double digit"
  elif [[ $digit -gt 99 && $digit -lt 1000 ]]; then
    echo "triple digit"
  else
    echo Error;
  fi
}
